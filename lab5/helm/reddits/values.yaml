# RabbitMQ
rabbitMQ:
  service:
    name: rabbitmq-svc
    port: 5672
    portName: http
  statefulset:
    name: rabbitmq-sts
    replicaCount: 1
    container:
      name: rabbitmq
      image: rabbitmq:3.8
  

# Worker
worker:
  configMap:
    name: worker-cm
  deployment:
    name: worker-deploy
    replicaCount: 1
    container:
      name: worker
      image: kaluzny1995/worker:latest
      liveDelay: 45
      livePeriod: 20
      readiDelay: 20
      readiPeriod: 10
    scheduleMins: 2


# InfluxDB
influxDB:
  service:
    name: influxdb-svc
    port: 8086
    portName: http
  persistentVolume:
    name: influxdb-pv
  persistentVolumeClaim:
    name: influxdb-pvc
  statefulset:
    name: influxdb-sts
    replicaCount: 1
    container:
      name: influxdb
      image: influxdb:1.8


# MongoDB
mongoDB:
  service:
    name: mongodb-svc
    port: 27017
    portName: http
  persistentVolume:
    name: mongodb-pv
  persistentVolumeClaim:
    name: mongodb-pvc
  statefulset:
    name: mongodb-sts
    replicaCount: 1
    container:
      name: mongodb
      image: mongo:4.4


# Grafana
grafana:
  service:
    name: grafana-svc
    port: 3000
    portName: http
  persistentVolume:
    name: grafana-pv
  persistentVolumeClaim:
    name: grafana-pvc
  deployment:
    name: grafana-deploy
    replicaCount: 1
    container:
      name: grafana
      image: grafana/grafana:5.0.0


# Redash
redash:
  configMap:
    name: redash-cm
    nWorkers: 4
  deployment:
    name: redash-deploy
    replicaCount: 1
    container:
      redash:
        name: redash
        image: redash/redash:8.0.0.b32245
      redis:
        name: redis
        image: redis:3.0-alpine
  job:
    name: redash-job
  service:
    name: redash-svc
    port: 5000
    portName: http

redis:
  service:
    name: redis
    port: 6380
    portName: redis

postgres:
  configMap:
    name: postgres-cm
    user: postgres
    password: postgres
    dbName: postgres
    dataPath: /var/lib/postgresql/data/db-files/
  service:
    name: postgres
    port: 5432
    portName: postgres
  persistentVolume:
    name: postgres-pv
  persistentVolumeClaim:
    name: postgres-pvc
  statefulset:
    name: postgres-sts
    replicaCount: 1
    container:
      name: postgres
      image: postgres:9.5-alpine



image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths: []
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
